---

- name: Include server firewall to check
  include_vars: server.yml

- name: Wait a bit to make sure listening is up
  shell: sleep 12
  args:
    executable: /bin/bash
  delegate_to: localhost
  run_once: true

- name: delete previous files
  win_shell: del /f /q C:\Windows\Temp\{{ ansible_hostname }}_output.csv C:\Windows\Temp\data*.txt
  args:
    executable: cmd
    warn: false
  ignore_errors: True 
  
- name: Get hostname
  block:
    - win_shell: echo {{ ansible_hostname }} > C:\Windows\Temp\data0.txt
    - win_shell: echo * >> C:\Windows\Temp\data0.txt
    - win_shell: echo * >> C:\Windows\Temp\data0.txt

- name: Grab ip only *****
  block:
    - win_shell: ipconfig | find "IPv4 Address" >  C:\Windows\Temp\ip.txt
    - win_shell: |
         Get-Content C:\Windows\Temp\ip.txt | %{ $_.Split(':')[1]; } > C:\Windows\Temp\lines.txt
    - win_shell: |
         Get-Content C:\Windows\Temp\lines.txt -First 1 > C:\Windows\Temp\iptop.txt
    - win_shell: |
         (Get-Content C:\Windows\Temp\iptop.txt).Trim() > C:\Windows\Temp\data1.txt
    - win_shell: copy "C:\Windows\Temp\data0.txt"+"C:\Windows\Temp\data1.txt" C:\Windows\Temp\data2.txt /Y
      args:
        executable: cmd

- name: Get the cpu core *****
  block:
    - win_shell: |
         Get-WmiObject â€“class Win32_processor | ft NumberOfCores > C:\Windows\Temp\cpucore.txt
    - win_shell: |
         (Get-Content C:\Windows\Temp\cpucore.txt)[3].Trim() > C:\Windows\Temp\data1.txt    
    - win_shell: copy "C:\Windows\Temp\data2.txt"+"C:\Windows\Temp\data1.txt" C:\Windows\Temp\data3.txt /Y
      args:
        executable: cmd

- name: Get the total memory
  block:
    - win_shell: |
         ((Get-WmiObject -class "cim_physicalmemory" | Measure-Object -Property Capacity -Sum).Sum) /1024/1024/1024 > C:\Windows\Temp\data1.txt    
    - win_shell: copy "C:\Windows\Temp\data3.txt"+"C:\Windows\Temp\data1.txt" C:\Windows\Temp\data4.txt /Y
      args:
        executable: cmd

- name: Get the total disk ****
  block:
    - win_shell: |
         Get-Disk | Foreach-Object {$_.Size/1024/1024/1024} > C:\Windows\Temp\data2.txt       
    - win_shell: |
         Get-Content c:\windows\temp\data2.txt | ForEach-Object -Begin {[int]$Sum = 0} -Process {$Sum += $_} -End {$Sum} > C:\Windows\Temp\data1.txt
    - win_shell: copy "C:\Windows\Temp\data4.txt"+"C:\Windows\Temp\data1.txt" C:\Windows\Temp\data5.txt /Y
      args:
        executable: cmd

- name: Put the headers
  win_shell: echo "Hostname,Check-Host,Port,IPAddress,CPUCore,RAM,Disk," > C:\Windows\Temp\data221.txt
  
- name: Put it in CSV in one line
  win_shell: |
     Get-Content -Path C:\Windows\Temp\data5.txt | %{$v += ($(if($v){", "}) + $_ + $t)} ; $v >> C:\Windows\Temp\data221.txt

- name: Obtain information about a file
  win_stat:
     path: C:\Windows\system32\PortQry.exe
  register: file_info
      
- name: Copy a single file
  win_copy:
     src: PortQry.exe
     dest: C:\Windows\system32\PortQry.exe
  when: 'file_info is succeeded'

- name: Check remote host port
  win_shell: |
     PortQry.exe -wt 4 /n {{ item.server2 }} /p tcp /e {{ item.port }}
  register: out
  ignore_errors: True
  when: item.server1 == ansible_hostname
  with_items: "{{ servers }}" 
  
- debug: var=out   
  
- name: Save remote port   
  win_shell: echo  ,{{ item.item.server2 }} port, {{ item.item.port }} is {% if item.failed %}closed or already tested or no dns{% else %} open{% endif %} >> C:\Windows\Temp\data222.txt
  args:
    executable: cmd
  when: item.item.server1 == ansible_hostname
  with_items: "{{ out.results }}"

- name: Combine final data
  win_shell: |
     Get-Content C:\Windows\Temp\data22*.txt | Out-File -FilePath C:\Windows\Temp\{{ ansible_hostname }}_output.csv -Encoding ASCII -Append
    
#- meta: end_play    
    
- name: Fetching file
  fetch:
    src: C:\Windows\Temp\{{ ansible_hostname }}_output.csv
    dest: ./{{ ansible_hostname }}_output.csv
    flat: yes
     
- name: Execute Validation
  shell: ./validate.py windows
  args:
    executable: /bin/bash
  delegate_to: localhost
  run_once: true
